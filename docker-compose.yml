version: "3.8"

services:
  # bellissimo-nginx-proxy:
  #   container_name: bellissimo-nginx
  #   restart: always
  #   environment:
  #     - HTPASSWD=admin:$apr1$xu5g0csj$GKyGduMtMXBAt1HaQ7Rpk/
  #     - FORWARD_PORT=3000
  #     - FORWARD_HOST=bellissimo-web
  #   ports:
  #     - 1337:80
  #   image: beevelop/nginx-basic-auth
  
  kibana:
    image: docker.elastic.co/kibana/kibana:8.7.1
    container_name: kibana
    environment:
      XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY: d1a66dfd-c4d3-4a0a-8290-2abcb83ab3aa
    ports:
      - 5601:5601
    deploy:    
      resources:
          limits:
            cpus: '2.0'
          reservations:
            cpus: '1.0'


  ## For save requests and analytic it
  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:8.7.1
    # 8.x
    environment: ['CLI_JAVA_OPTS=-Xms2g -Xmx2g','bootstrap.memory_lock=true','discovery.type=single-node','xpack.security.enabled=false', 'xpack.security.enrollment.enabled=false']
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    deploy:    
      resources:
          limits:
            cpus: '2.0'
          reservations:
            cpus: '1.0'

  ## import db
  mongo_seed:
    image: mongo:latest
    container_name: import-db
    depends_on:
      - mongo
    volumes:
      - ./containers/import_db.sh:/import_db.sh:ro
      - ./containers/mongo_default_filters.json:/mongo_default_filters.json:ro

      - ./docker/mongodb:/data
    command: /import_db.sh

  ## WebAuth 
  bellissimo-web-auth:
    container_name: bell-web-guard
    image: 'beevelop/nginx-basic-auth'
    ports:
      - '1337:80'
    env_file:
      - docker.env
      ## escape $ with $$ in Docker yml due to variable expansion
      ## example user/pass generated with htpasswd is foo:bar
      # - HTPASSWD=foo:$$apr1$$odHl5EJN$$KbxMfo86Qdve2FH4owePn.

  ## Mongo database
  mongo:
    restart: always
    container_name: mongo
    image: mongo:latest
    volumes:
      - ./docker/mongo-data:/data/db

  redis:
    container_name: redis
    restart: always
    image: redis:latest

  bellissimo-web:
    restart: always
    image: node:20
    container_name: bellissimo-web
    volumes:
      - ./web:/app
    working_dir: /app
    command: npm run start
    # ports:
    #   - 3000:3000
    env_file:
      - docker.env
    depends_on:
      - redis
      - mongo

  phpfpm:
    image: 'bitnami/php-fpm:latest'
  
  bellissimo:
    restart: always
    image: bellissimo-bin
    container_name: bell
    volumes:
      - ./plugins.toml:/usr/src/app/plugins.toml:ro
      - ./plugins:/usr/src/app/plugins
      - ./public:/usr/src/app/public
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - REDIS_URI=redis://redis/
      - MONGO_URI=mongodb://mongo:27017
      - PHP_FPM_HOST=phpfpm
      - PHP_FPM_PORT=9000
    depends_on:
      - redis
      - mongo
      - phpfpm

  varnish:
    image: varnish:stable
    container_name: varnish
    volumes:
      - "./default.vcl:/etc/varnish/default.vcl"
    ports:
      - "80:80"
    tmpfs:
      - /var/lib/varnish:exec
    environment:
      - VARNISH_SIZE=2G  
    command: "-p default_keep=300"
    depends_on:
      - bellissimo-collector
      - redis
      - mongo
      - bellissimo
      - nginx

  bellissimo-collector:
    container_name: bell-bg
    restart: always
    image: bellissimo-bin
    environment:
      - REDIS_URI=redis://redis/
      - MONGO_URI=mongodb://mongo:27017
    command: '/usr/src/app/target/release/bellissimo --mode=background'
    depends_on:
      - bellissimo
      - redis
      - mongo

  nginx:
    restart: always
    image: nginx:latest
    container_name: reverse_proxy
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    # ports:
      # - "443:443"
    depends_on:
      - bellissimo